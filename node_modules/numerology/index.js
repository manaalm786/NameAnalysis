// JSON files with numerology number analyses and zodiac descriptions
const rootNumbers = require("./root.json")
const soulNumbers = require("./soul.json")
const dreamNumbers = require("./dream.json")
const zodiac = require("./signs.json")

// Parsing the JSON files into arrays
const rootNumberDesc = []
rootNumbers.map(item => {
    rootNumberDesc.push(item.analysis);
});

const soulNumberDesc = []
soulNumbers.map(item => {
    soulNumberDesc.push(item.analysis);
});

const dreamNumberDesc = []
dreamNumbers.map(item => {
    dreamNumberDesc.push(item.analysis);
});

// Parsing JSON file into object
const signsDesc = {}
zodiac.map(item => {
    signsDesc[item.sign] = item.analysis;
});

// Numerology values associated with letters
let values = {
    a: 1,
    b: 2,
    c: 3,
    d: 4,
    e: 5,
    f: 6,
    g: 7,
    h: 8,
    i: 9,
    j: 1,
    k: 2,
    l: 3,
    m: 4,
    n: 5, 
    o: 6,
    p: 7,
    q: 8,
    r: 9,
    s: 1,
    t: 2,
    u: 3,
    v: 4,
    w: 5,
    x: 6,
    y: 7,
    z: 8
};


// Derives root number description
const getRootNumberFromName = name => {
    let rootNumber = 0;
    for (let char of name.toLowerCase()) {
        if(char in values) {
            rootNumber += values[char];
        }
        
    }
    // reduces root number to a single digit
    rootNumber = rootNumber % 10;
    return rootNumberDesc[rootNumber];
}


// Derives soul urge number description
const getSoulUrgeNumberFromName = name => {
    let soulNumber = 0;
    for (let char of name.toLowerCase()) {
        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {
            soulNumber += values[char];
        }
    }
    soulNumber = soulNumber % 10;
    return soulNumberDesc[soulNumber];

}
    
// Derives dream number description
const getDreamNumberFromName = name => {
    let dreamNumber = 0;
    for (let char of name.toLowerCase()) {
        if (!(char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') && char in values) {
            dreamNumber += values[char];
        }
    }
    dreamNumber = dreamNumber % 10;
    return dreamNumberDesc[dreamNumber];
}

// Returns zodiac description
const getZodiacDescription = sign => {
    if (sign.toLowerCase() in signsDesc) {
        return signsDesc[sign.toLowerCase()];
    }
    else {
        return " You have inputted an invalid zodiac sign."
    }
    

}

// Returns combination of above analyses
const getFullNameAnalysis = (name, sign) => {
    return getRootNumberFromName(name) + getSoulUrgeNumberFromName(name) + getDreamNumberFromName(name) + getZodiacDescription(sign);
}

module.exports.getFullNameAnalysis = getFullNameAnalysis